document.addEventListener('DOMContentLoaded', () => {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    const blockOverlay = document.getElementById('blockOverlay');
    const blockTimer = document.getElementById('blockTimer');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    function updateBlockMessage() {
        const lang = localStorage.getItem('language') || 'ru';
        const message = blockOverlay.querySelector('p');
        message.textContent = lang === 'ru'
            ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–∞–∫ —á–∞—Å—Ç–æ. –≠—Ç–æ –º–æ–∂–µ—Ç –Ω–∞–≤—Ä–µ–¥–∏—Ç—å —Ä–∞–±–æ—Ç–µ —Å–∞–π—Ç–∞."
            : "Please do not refresh the page so often. This may harm the site's performance.";
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const isBlocked = localStorage.getItem('isBlocked') === 'true';
    const blockEndTime = parseInt(localStorage.getItem('blockEndTime')) || 0;
    const now = Date.now();

    if (isBlocked && blockEndTime > now) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
        blockOverlay.classList.add('active');
        updateBlockMessage();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä
        const remainingTime = Math.ceil((blockEndTime - now) / 1000);
        blockTimer.textContent = remainingTime;

        const timerInterval = setInterval(() => {
            const timeLeft = Math.ceil((blockEndTime - Date.now()) / 1000);
            blockTimer.textContent = timeLeft;

            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                blockOverlay.classList.remove('active');
                localStorage.removeItem('isBlocked');
                localStorage.removeItem('blockEndTime');
                localStorage.removeItem('refreshCount');
                localStorage.removeItem('firstRefreshTime');
            }
        }, 1000);
    } else {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        localStorage.removeItem('isBlocked');
        localStorage.removeItem('blockEndTime');
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (!isBlocked) {
        const refreshCount = parseInt(localStorage.getItem('refreshCount')) || 0;
        const firstRefreshTime = parseInt(localStorage.getItem('firstRefreshTime')) || now;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫ –∏ –≤—Ä–µ–º—è
        localStorage.setItem('refreshCount', refreshCount + 1);
        if (refreshCount === 0) {
            localStorage.setItem('firstRefreshTime', now);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 10 —Å–µ–∫—É–Ω–¥
        const timeElapsed = (now - firstRefreshTime) / 1000; // –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const currentCount = parseInt(localStorage.getItem('refreshCount'));

        if (timeElapsed <= 10 && currentCount > 15) {
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
            const blockDuration = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            localStorage.setItem('isBlocked', 'true');
            localStorage.setItem('blockEndTime', now + blockDuration);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π
            blockOverlay.classList.add('active');
            updateBlockMessage();

            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
            blockTimer.textContent = 30;
            const timerInterval = setInterval(() => {
                const timeLeft = Math.ceil((parseInt(localStorage.getItem('blockEndTime')) - Date.now()) / 1000);
                blockTimer.textContent = timeLeft;

                if (timeLeft <= 0) {
                    clearInterval(timerInterval);
                    blockOverlay.classList.remove('active');
                    localStorage.removeItem('isBlocked');
                    localStorage.removeItem('blockEndTime');
                    localStorage.removeItem('refreshCount');
                    localStorage.removeItem('firstRefreshTime');
                }
            }, 1000);
        } else if (timeElapsed > 10) {
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
            localStorage.setItem('refreshCount', 1);
            localStorage.setItem('firstRefreshTime', now);
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã, —è–∑—ã–∫–∞, —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏ —Ç.–¥.) –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const runButton = document.getElementById('runButton');
    const htmlInput = document.getElementById('htmlInput');
    const cssInput = document.getElementById('cssInput');
    const jsInput = document.getElementById('jsInput');
    const output = document.getElementById('output');
    const errorMessage = document.getElementById('error-message');
    const themeToggle = document.getElementById('themeToggle');
    const langRu = document.getElementById('langRu');
    const langEn = document.getElementById('langEn');

    // ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
});

document.addEventListener('DOMContentLoaded', () => {
    const runButton = document.getElementById('runButton');
    const htmlInput = document.getElementById('htmlInput');
    const cssInput = document.getElementById('cssInput');
    const jsInput = document.getElementById('jsInput');
    const output = document.getElementById('output');
    const errorMessage = document.getElementById('error-message');
    const themeToggle = document.getElementById('themeToggle');
    const langRu = document.getElementById('langRu');
    const langEn = document.getElementById('langEn');

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –∏–∑ localStorage
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light') {
        document.body.classList.add('light-theme');
        if (themeToggle) themeToggle.textContent = 'üåô';
    } else {
        document.body.classList.remove('light-theme');
        if (themeToggle) themeToggle.textContent = '‚òÄÔ∏è';
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    if (themeToggle) {
        themeToggle.addEventListener('click', () => {
            document.body.classList.toggle('light-theme');
            themeToggle.textContent = document.body.classList.contains('light-theme') ? 'üåô' : '‚òÄÔ∏è';
            localStorage.setItem('theme', document.body.classList.contains('light-theme') ? 'light' : 'dark');
        });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞
    function setLanguage(lang) {
        document.querySelectorAll('[data-ru][data-en]').forEach(element => {
            element.textContent = element.getAttribute(`data-${lang}`);
        });
        document.documentElement.lang = lang === 'ru' ? 'ru' : 'en';

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ active –¥–ª—è –∫–Ω–æ–ø–æ–∫
        if (lang === 'ru') {
            langRu.classList.add('active');
            langEn.classList.remove('active');
        } else {
            langEn.classList.add('active');
            langRu.classList.remove('active');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è index.html
        if (htmlInput && cssInput && jsInput) {
            if (lang === 'ru') {
                htmlInput.placeholder = '–í—Å—Ç–∞–≤—å—Ç–µ HTML —Å—é–¥–∞...';
                cssInput.placeholder = '–í—Å—Ç–∞–≤—å—Ç–µ CSS —Å—é–¥–∞...';
                jsInput.placeholder = '–í—Å—Ç–∞–≤—å—Ç–µ JS —Å—é–¥–∞...';
            } else {
                htmlInput.placeholder = 'Paste HTML here...';
                cssInput.placeholder = 'Paste CSS here...';
                jsInput.placeholder = 'Paste JS here...';
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ localStorage
        localStorage.setItem('language', lang);
    }

    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ localStorage
    const savedLanguage = localStorage.getItem('language') || 'ru'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru', –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
    if (langRu && langEn) {
        setLanguage(savedLanguage);
        langRu.addEventListener('click', () => setLanguage('ru'));
        langEn.addEventListener('click', () => setLanguage('en'));
    }

    // –õ–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è index.html)
    if (runButton && htmlInput && cssInput && jsInput && output && errorMessage) {
        console.log("–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω—ã, —Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤");

        runButton.addEventListener('click', () => {
            console.log("–ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç' –Ω–∞–∂–∞—Ç–∞");
            const html = htmlInput.value.trim();
            console.log("HTML –≤–≤–µ–¥—ë–Ω–Ω—ã–π:", `'${html}'`);

            if (!html) {
                console.log("HTML –ø—É—Å—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ");
                errorMessage.textContent = document.documentElement.lang === 'ru' ? "–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏ –≤ HTML" : "You didn't enter anything in HTML";
                errorMessage.classList.add('show');
                setTimeout(() => {
                    errorMessage.classList.remove('show');
                    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥");
                }, 5000);
                return;
            }

            console.log("HTML –Ω–µ –ø—É—Å—Ç–æ–π, –æ–±–Ω–æ–≤–ª—è–µ–º iframe");
            const css = cssInput.value || '';
            const js = jsInput.value || '';
            const content = `
                <!DOCTYPE html>
                <html>
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                        body {
                            background: #2a2a40;
                            color: #e0e0e0;
                            font-family: 'Roboto', sans-serif;
                            margin: 0;
                            padding: 20px;
                            overflow: auto;
                            box-sizing: border-box;
                        }
                        ::-webkit-scrollbar {
                            width: 10px;
                            height: 10px;
                        }
                        ::-webkit-scrollbar-track {
                            background: #3a3a55;
                            border-radius: 10px;
                        }
                        ::-webkit-scrollbar-thumb {
                            background: #00d4ff;
                            border-radius: 10px;
                            box-shadow: 0 0 5px rgba(0, 212, 255, 0.5);
                        }
                        ::-webkit-scrollbar-thumb:hover {
                            background: #007bff;
                        }
                        ${css}
                    </style>
                </head>
                <body>
                    ${html}
                    <script>${js}<\/script>
                </body>
                </html>
            `;

            try {
                console.log("–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å iframe");
                const blob = new Blob([content], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                output.src = url;
                setTimeout(() => URL.revokeObjectURL(url), 1000);
                console.log("iframe —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω");
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ iframe:", error);
                output.srcdoc = '<p style="color: #ff4081;">–û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12).</p>';
            }
        });
    }
});
